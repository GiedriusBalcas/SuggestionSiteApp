@page "/Profile"
@attribute [Authorize]

@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

<h1 class="page-heading text-uppercase mb-4">My Profile</h1>

<div class="row">
	<div class="col-12 close-button-section">
		<button class="btn btn-close" @onclick="ClosePage"></button>
	</div>
</div>

<div class="form-layout mb-3">
	<h2 class="my-submission-heading">My Account</h2>
	<p class="my-submission-text">
		<a href="MicrosoftIdentity/Account/EditProfile">
			Edit My Profile
		</a>
	</p>
</div>

@if (_approvedSubmissions?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Approved Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that are currently active.</p>

        @foreach (var s in _approvedSubmissions)
        {
            <hr class="my-submission-separator" />
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>

            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }

    </div>
}
@if (_archivedSubmissions?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Archived Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that were active but did not gain enough traction.</p>

        @foreach (var s in _archivedSubmissions)
        {
            <hr class="my-submission-separator" />
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>

            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }

    </div>
}
@if (_pendingSubmissions?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Pending Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that have not yet been reviewed by the administrators.</p>

        @foreach (var s in _pendingSubmissions)
        {
            <hr class="my-submission-separator" />
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>

            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }

    </div>
}
@if (_rejectedSubmissions?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Rejected Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that were not deemed to be appropriate for the training suggestion site.</p>

        @foreach (var s in _rejectedSubmissions)
        {
            <hr class="my-submission-separator" />
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>

            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }

    </div>
}


@code {
	private UserModel _loggedInUser;
	private List<SuggestionModel> _submissions;
	private List<SuggestionModel> _approvedSubmissions;
	private List<SuggestionModel> _archivedSubmissions;
	private List<SuggestionModel> _pendingSubmissions;
	private List<SuggestionModel> _rejectedSubmissions;

	protected async override Task OnInitializedAsync()
	{
	    _loggedInUser = await authProvider.GetUserFromAuth(userData);

		var results = await suggestionData.GetUsersSuggestions(_loggedInUser.Id);

		if(_loggedInUser is not null && results is not null)
		{
			_submissions = results.OrderByDescending(s => s.DateCreated).ToList();
			_approvedSubmissions = _submissions.Where(s => s.ApprovedForRelease && !s.Archived&& !s.Rejected).ToList();
			_archivedSubmissions = _submissions.Where(s => s.Archived && !s.Rejected).ToList();
			_pendingSubmissions = _submissions.Where(s => !s.ApprovedForRelease && !s.Archived && !s.Rejected).ToList();
			_rejectedSubmissions = _submissions.Where(s => s.Rejected).ToList();
		}
	}

	private void ClosePage()
	{
		navManager.NavigateTo("/");
	}
}
